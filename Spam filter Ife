{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "79e82bf5-8da5-40a4-bed1-c06084920dcb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import string"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "2e7cde1d-51c8-4a60-a29c-bcd7a2760f5e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#read dataset\n",
    "spam_df = pd.read_csv('spam.csv', encoding=\"ISO-8859-1\")\n",
    "\n",
    "#subset and rename columns\n",
    "spam_df = spam_df[['v1', 'v2']]\n",
    "spam_df.rename(columns={'v1': 'spam', 'v2': 'text'}, inplace=True)\n",
    "\n",
    "#convert spam column to binary\n",
    "spam_df.spam = spam_df.spam.apply(lambda s: True if s=='spam' else False)\n",
    "\n",
    "#lowercase everything and remove punctuation\n",
    "spam_df.text = spam_df.text.apply(lambda t: t.lower().translate(str.maketrans('', '', string.punctuation)))\n",
    "\n",
    "#shuffle\n",
    "spam_df = spam_df.sample(frac=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "d880049c-e7f7-4ffd-9605-1f277352b37a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>spam</th>\n",
       "      <th>text</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1559</th>\n",
       "      <td>False</td>\n",
       "      <td>single line with a big meaning miss anything 4...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4508</th>\n",
       "      <td>False</td>\n",
       "      <td>ìï takin linear algebra today</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5472</th>\n",
       "      <td>False</td>\n",
       "      <td>well obviously not because all the people in m...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1108</th>\n",
       "      <td>False</td>\n",
       "      <td>no youll just get a headache trying to figure ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4621</th>\n",
       "      <td>False</td>\n",
       "      <td>they finally came to fix the ceiling</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2723</th>\n",
       "      <td>False</td>\n",
       "      <td>tunde how are you doing this is just wishing y...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5505</th>\n",
       "      <td>False</td>\n",
       "      <td>what i told before i tell stupid hear after i ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>False</td>\n",
       "      <td>how long does applebees fucking take</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1616</th>\n",
       "      <td>False</td>\n",
       "      <td>k makes sense btw carlos is being difficult so...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5396</th>\n",
       "      <td>False</td>\n",
       "      <td>as in i want custom officer discount oh</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5572 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       spam                                               text\n",
       "1559  False  single line with a big meaning miss anything 4...\n",
       "4508  False                      ìï takin linear algebra today\n",
       "5472  False  well obviously not because all the people in m...\n",
       "1108  False  no youll just get a headache trying to figure ...\n",
       "4621  False               they finally came to fix the ceiling\n",
       "...     ...                                                ...\n",
       "2723  False  tunde how are you doing this is just wishing y...\n",
       "5505  False  what i told before i tell stupid hear after i ...\n",
       "437   False               how long does applebees fucking take\n",
       "1616  False  k makes sense btw carlos is being difficult so...\n",
       "5396  False            as in i want custom officer discount oh\n",
       "\n",
       "[5572 rows x 2 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "spam_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "c6ace8ba-dfd5-41c3-88e0-a1284b9f3a6a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dont b floppy b snappy  happy only gay chat service with photo upload call 08718730666 10pmin 2 stop our texts call 08712460324\n",
      "-------\n",
      "wan2 win a meetgreet with westlife 4 u or a m8 they are currently on what tour 1unbreakable 2untamed 3unkempt text 12 or 3 to 83049 cost 50p std text\n",
      "-------\n",
      "camera  you are awarded a sipix digital camera call 09061221066 fromm landline delivery within 28 days\n",
      "-------\n",
      "big brother alert the computer has selected u for 10k cash or 150 voucher call 09064018838 ntt po box cro1327 18 bt landline cost 150ppm mobiles vary\n",
      "-------\n",
      "pdatenow  double mins and 1000 txts on orange tariffs latest motorola sonyericsson  nokia  bluetooth free call mobileupd8 on 08000839402 or call2optoutyhl\n",
      "-------\n"
     ]
    }
   ],
   "source": [
    "for t in spam_df[spam_df.spam == True].iloc[:5].text:\n",
    "    print(t)\n",
    "    print('-------')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "f67a833d-44cd-452b-a3a3-5b5687f1a896",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "single line with a big meaning miss anything 4 ur best life but\n",
      "-------\n",
      "ìï takin linear algebra today\n",
      "-------\n",
      "well obviously not because all the people in my cool college life went home \n",
      "-------\n",
      "no youll just get a headache trying to figure it out u can trust me to do the math i promise o\n",
      "-------\n",
      "they finally came to fix the ceiling\n",
      "-------\n"
     ]
    }
   ],
   "source": [
    "for t in spam_df[spam_df.spam == False].iloc[:5].text:\n",
    "    print(t)\n",
    "    print('-------')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "37f87759-9dbd-453b-92cc-41a9e22db491",
   "metadata": {},
   "outputs": [],
   "source": [
    "#get training set\n",
    "train_spam_df = spam_df.iloc[:int(len(spam_df)*0.7)]\n",
    "\n",
    "#get testing set\n",
    "test_spam_df = spam_df.iloc[int(len(spam_df)*0.7):]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "c670c500-501b-404b-ab16-7194d5526206",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.13435897435897437\n"
     ]
    }
   ],
   "source": [
    "FRAC_SPAM_TEXTS = train_spam_df.spam.mean()\n",
    "print(FRAC_SPAM_TEXTS)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "aa0992b7-c717-4b78-bfd8-650364e483aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "#get all words from spam and non-spam datasets\n",
    "train_spam_words = ' '.join(train_spam_df[train_spam_df.spam == True].text).split(' ')\n",
    "train_non_spam_words = ' '.join(train_spam_df[train_spam_df.spam == False].text).split(' ')\n",
    "\n",
    "common_words = set(train_spam_words).intersection(set(train_non_spam_words))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "dc1f7b1c-18b5-494f-abc6-d003a344880e",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_spam_bow = dict()\n",
    "for w in common_words:\n",
    "    train_spam_bow[w] = train_spam_words.count(w) / len(train_spam_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "dd7d2f31-fc8c-4f4b-a854-fbc11412d7d8",
   "metadata": {},
   "outputs": [],
   "source": [
    "train_non_spam_bow = dict()\n",
    "for w in common_words:\n",
    "    train_non_spam_bow[w] = train_non_spam_words.count(w) / len(train_non_spam_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "26ed4972-9fd0-4b10-a341-7ddd61ee76b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict_text(t, verbose=False):\n",
    "    #if some word doesnt appear in either spam or non-spam BOW, disregard it\n",
    "    valid_words = [w for w in t if w in train_spam_bow]\n",
    "    \n",
    "    #get the probabilities of each valid word showing up in spam and non-spam BOW\n",
    "    spam_probs = [train_spam_bow[w] for w in valid_words]\n",
    "    non_spam_probs = [train_non_spam_bow[w] for w in valid_words]\n",
    "    \n",
    "    #print probs if requested\n",
    "    if verbose:\n",
    "        data_df = pd.DataFrame()\n",
    "        data_df['word'] = valid_words\n",
    "        data_df['spam_prob'] = spam_probs\n",
    "        data_df['non_spam_prob'] = non_spam_probs\n",
    "        data_df['ratio'] = [s/n if n > 0 else np.inf for s,n in zip(spam_probs, non_spam_probs)]\n",
    "        print(data_df)\n",
    "     \n",
    "    #calculate spam score as sum of logs for all probabilities\n",
    "    spam_score = sum([np.log(p) for p in spam_probs]) + np.log(FRAC_SPAM_TEXTS)\n",
    "    \n",
    "    #calculate non-spam score as sum of logs for all probabilities\n",
    "    non_spam_score = sum([np.log(p) for p in non_spam_probs]) + np.log(1-FRAC_SPAM_TEXTS)\n",
    "    \n",
    "    #if verbose, report the two scores\n",
    "    if verbose:\n",
    "        print('Spam Score: %s'%spam_score)\n",
    "        print('Non-Spam Score: %s'%non_spam_score)\n",
    "   \n",
    "    #if spam score is higher, mark this as spam\n",
    "    return (spam_score >= non_spam_score)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0a719bf1-b1d1-4981-bf30-5d83f2f3fa5c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     word  spam_prob  non_spam_prob      ratio\n",
      "0  urgent   0.003794       0.000041  91.873295\n",
      "1    call   0.020021       0.003015   6.640798\n",
      "2    this   0.004521       0.003593   1.258230\n",
      "3  number   0.001534       0.000971   1.580437\n",
      "Spam Score: -23.371484388236865\n",
      "Non-Spam Score: -28.609579426821952\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_text('urgent call this number'.split(), verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6f8ccfb7-f44d-497a-98cc-c6c8a5e7907c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      word  spam_prob  non_spam_prob     ratio\n",
      "0      hey   0.000323       0.001528  0.211324\n",
      "1       do   0.001372       0.005555  0.247069\n",
      "2      you   0.015419       0.026039  0.592161\n",
      "3     want   0.002018       0.002106  0.958211\n",
      "4       to   0.037782       0.021951  1.721211\n",
      "5       go   0.001938       0.003593  0.539242\n",
      "6        a   0.020263       0.015467  1.310127\n",
      "7    movie   0.000161       0.000289  0.558500\n",
      "8  tonight   0.000161       0.000826  0.195475\n",
      "Spam Score: -57.897939094176294\n",
      "Non-Spam Score: -50.4966090051729\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_text('hey do you want to go a movie tonight'.split(), verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "e0f6a7ce-9721-4ca5-bfdc-c94758b54cd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        word  spam_prob  non_spam_prob      ratio\n",
      "0      offer   0.000969       0.000062  15.638008\n",
      "1        for   0.012271       0.007744   1.584651\n",
      "2  unlimited   0.000404       0.000062   6.515836\n",
      "3      money   0.000161       0.000929   0.173756\n",
      "4       call   0.020021       0.003015   6.640798\n",
      "5        now   0.010333       0.004027   2.566237\n",
      "Spam Score: -38.37682576140897\n",
      "Non-Spam Score: -42.68374243347226\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_text('offer for unlimited money call now'.split(), verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "f18ee4e1-199d-44c5-bcf0-029a0e9bd516",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  word  spam_prob  non_spam_prob     ratio\n",
      "0  are   0.004440       0.005761  0.770690\n",
      "1  you   0.015419       0.026039  0.592161\n",
      "2   at   0.001857       0.005493  0.338040\n",
      "3  yet   0.000081       0.000702  0.114985\n",
      "Spam Score: -27.309750576805246\n",
      "Non-Spam Score: -21.414807178830678\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predict_text('are you at class yet'.split(), verbose=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "4d19d097-a0fb-47a9-a9fc-8d0a54cacde9",
   "metadata": {},
   "outputs": [],
   "source": [
    "predictions = test_spam_df.text.apply(lambda t: predict_text(t.split()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "7e7832c5-cf7b-4e62-b9f3-cac867226abf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraction Spam Correctly Detected: 0.9103139013452914\n"
     ]
    }
   ],
   "source": [
    "frac_spam_messages_correctly_detected = np.sum((predictions == True) & (test_spam_df.spam == True)) / np.sum(test_spam_df.spam == True)\n",
    "print('Fraction Spam Correctly Detected: %s'%frac_spam_messages_correctly_detected)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "587830c8-8702-4f4e-8ae7-d315cbf3051f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fraction Valid Messages Sent to Spam: 0.018633540372670808\n"
     ]
    }
   ],
   "source": [
    "frac_valid_sent_to_spam = np.sum((predictions == True) & (test_spam_df.spam == False)) / np.sum(test_spam_df.spam == False)\n",
    "print('Fraction Valid Messages Sent to Spam: %s'%frac_valid_sent_to_spam)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "02c91f9b-f395-4454-9161-ab3f3df28f1e",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
